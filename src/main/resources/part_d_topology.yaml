# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

# topology definition
# name to be used when submitting
name: "part-D"

# TODO
# Task: implement your topology for part d

# topology configuration
# this will be passed to the submitter as a map of config options
config:
    storm.local.hostname: "localhost"
    topology.max.task.parallelism: 3
    # set this to true if you want to see more debug log
    # set it to false before submitting
    topology.debug: true
    # Hint: you can set input file path here
    # make sure it's "/tmp/data.txt" in your final submission
    input: "/tmp/data.txt"
    topValue: 10

    # Hint: set N here
    # make sure it's 10 in your final submission

components:
  - id: "poolConfig"
    className: "org.apache.storm.redis.common.config.JedisPoolConfig"
    constructorArgs:
      - "localhost"
      - 6379
      - 2000
      - "uiuc_cs498_mp6"
      - 0
  - id: "storeMapper"
    className: "edu.illinois.storm.TopNStoreMapper"
    constructorArgs:
      - "partDTopN"


# spout definitions
spouts:
  - id: "sentence-spout"
    className: "org.apache.storm.flux.wrappers.spouts.FluxShellSpout"
    constructorArgs:
      # Command line
      - ["python", "file_reader_spout.py"]
      # Output field(s)
      - ["sentence"]
    parallelism: 1

# bolt definitions
bolts:
  - id: "splitter-bolt"
    className: "org.apache.storm.flux.wrappers.bolts.FluxShellBolt"
    constructorArgs:
      # Command line
      - ["python", "split_sentence_bolt.py"]
      # Output field(s)
      - ["word"]
    parallelism: 1

  - id: "normalizer-bolt"
    className: "org.apache.storm.flux.wrappers.bolts.FluxShellBolt"
    constructorArgs:
      # Command line
      - ["python", "normalizer_bolt.py"]
      # Output field(s)
      - ["word"]
    parallelism: 1

  - id: "counter-bolt"
    className: "org.apache.storm.flux.wrappers.bolts.FluxShellBolt"
    constructorArgs:
      # Command line
      - ["python", "word_count_bolt.py"]
      # Output field(s)
      - ["word","count"]
    parallelism: 1

  - id: "top-n-bolt"
    className: "org.apache.storm.flux.wrappers.bolts.FluxShellBolt"
    constructorArgs:
      # Command line
      - ["python", "top_n_finder_bolt.py"]
      # Output field(s)
      - ["top-N","topWordsString"]
    parallelism: 1

  - id: "redis-store-bolt"
    className: "org.apache.storm.redis.bolt.RedisStoreBolt"
    constructorArgs:
      - ref: "poolConfig"
      - ref: "storeMapper"
    parallelism: 1

# stream definitions
# stream definitions define connections between spouts and bolts.
streams:
  # Task: pipe output of sentences generating spout to split bolt
  - name: "Spout --> Splitter" # name isn't used (placeholder for logging, UI, etc.)
    # The stream emitter
    from: "sentence-spout"
    # The stream consumer
    to: "splitter-bolt"
    # Grouping type
    grouping:
      type: SHUFFLE

  - name: "Splitter -> Normalizer"
    from: "splitter-bolt"
    to: "normalizer-bolt"
    grouping:
      type: SHUFFLE

  # Task: pipe output of split bolt to word count bolt
  # Hint: choose the right grouping type to make problem easier
  - name: "Normalizer -> Counter"
    from: "normalizer-bolt"
    to: "counter-bolt"
    grouping:
      type: FIELDS
      args: ["word"]

  - name: "Counter -> TopNFinder"
    from: "counter-bolt"
    to: "top-n-bolt"
    grouping:
      type: SHUFFLE

  # Task: pipe output of word count bolt to redis store bolt
  - name: "TopNFinder -> Redis-Store"
    from: "top-n-bolt"
    to: "redis-store-bolt"
    grouping:
      type: SHUFFLE
